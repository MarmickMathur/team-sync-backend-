// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(uuid())
  email           String             @unique
  password        String // this will store the hashed password
  name            String?
  avatar          String?
  createdAt       DateTime           @default(now())
  createdTickets  Ticket[]           @relation("TicketsOwned")
  assignedTickets Ticket[]           @relation("TicketAssigned")
  teams           TeamUser[]         @relation("memofTeam")
  organizations   UserOrganization[] @relation("user")
  TicketLog       TicketLog[]        @relation("actor")
  Ticket          Ticket[]
}

model Team {
  id            String             @id @default(uuid())
  name          String
  createdAt     DateTime           @default(now())
  Ticket        Ticket[]           @relation("TeamAssigned")
  members       TeamUser[]         @relation("teamofMem")
  organizations TeamOrganization[] @relation("team")
}

model TeamUser {
  userId   String
  teamId   String
  role     TeamRoles
  joinedAt DateTime  @default(now())

  user User @relation("memofTeam", fields: [userId], references: [id])
  team Team @relation("teamofMem", fields: [teamId], references: [id])

  @@id([userId, teamId]) // composite primary key
}

model Ticket {
  id          String      @id @default(uuid())
  title       String?
  description String?
  status      Status      @default(to_do)
  created_at  DateTime    @default(now())
  deadline    DateTime?
  creator_id  User        @relation("TicketsOwned", fields: [creator], references: [id])
  creator     String
  assigned_to User?       @relation("TicketAssigned", fields: [assigned], references: [id])
  assigned    String?
  team        Team?       @relation("TeamAssigned", fields: [teamId], references: [id])
  teamId      String?
  priority    Priority    @default(low)
  logs        TicketLog[] @relation("logs")
  updatedById String? // Track user who last updated
  updatedBy   User?       @relation(fields: [updatedById], references: [id])
}

model Organization {
  id         String             @id @default(uuid())
  name       String?
  created_at DateTime           @default(now())
  teams      TeamOrganization[] @relation("teams")
  members    UserOrganization[] @relation("orgs")
}

model TeamOrganization {
  teamId         String
  organizationId String
  joinedAt       DateTime @default(now())

  team         Team         @relation("team", fields: [teamId], references: [id])
  organization Organization @relation("teams", fields: [organizationId], references: [id])

  @@id([teamId, organizationId]) // composite primary key
}

model UserOrganization {
  userId         String
  organizationId String
  joinedAt       DateTime          @default(now())
  role           OrganizationRoles

  user         User         @relation("user", fields: [userId], references: [id])
  organization Organization @relation("orgs", fields: [organizationId], references: [id])

  @@id([userId, organizationId]) // composite primary key
}

//incomplete logs model
model TicketLog {
  id         String    @id @default(uuid())
  actionType LogAction
  snapshot   Json // Full ticket state as JSON
  actor      User?     @relation("actor", fields: [actorId], references: [id])
  actorId    String?
  ticketId   String
  createdAt  DateTime  @default(now())
  Ticket     Ticket    @relation("logs", fields: [ticketId], references: [id], onDelete: Cascade)
  changes    Json? // Track modified fields (optional)

  @@index([ticketId])
  @@index([createdAt])
  @@index([actionType])
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}

enum Status {
  to_do
  in_progress
  approval
  done
}

enum Priority {
  low
  medium
  high
}

enum OrganizationRoles {
  owner
  admin
  member
}

enum TeamRoles {
  lead
  member
  external_contributor
}
